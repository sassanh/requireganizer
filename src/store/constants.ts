/* eslint-disable sort-exports/sort-exports */

import { Store } from "./store";

export enum Environment {
  WebApplication = "web_application_frameworks",
  MobileApplication = "mobile_application_frameworks",
  DesktopApplication = "desktop_application_frameworks",
  EmbeddedDevice = "embedded_device_frameworks",
  MachineLearning = "machine_learning_frameworks",
  GameDevelopment = "game_development_frameworks",
}

export enum ProgrammingLanguage {
  C = "c",
  CPlusPlus = "cplusplus",
  CSharp = "csharp",
  Dart = "dart",
  Elixir = "elixir",
  FSharp = "fsharp",
  GDScript = "gdscript",
  Go = "go",
  Haxe = "haxe",
  Java = "java",
  JavaScript = "javascript",
  Julia = "julia",
  Kotlin = "kotlin",
  Lua = "lua",
  ObjectiveC = "objective_c",
  PHP = "php",
  Perl = "perl",
  Python = "python",
  QML = "qml",
  R = "r",
  Racket = "racket",
  Ruby = "ruby",
  Rust = "rust",
  Scala = "scala",
  Shell = "shell",
  Swift = "swift",
  TypeScript = "typescript",
}

export enum Framework {
  ASPNETCore = "asp_net_core",
  Angular = "angular",
  AppKit = "app_kit",
  Avalonia = "avalonia",
  Bash = "bash",
  Caffe = "caffe",
  CakePHP = "cake_php",
  Cocoa = "cocoa",
  Contiki = "contiki",
  Django = "django",
  Electron = "electron",
  EmberJS = "ember_js",
  ExpressJS = "express_js",
  Fable = "fable",
  Flask = "flask",
  Flutter = "flutter",
  Framework7 = "framework7",
  GTK = "gtk",
  GatsbyJS = "gatsby_js",
  Godot = "godot",
  HaxeFlixel = "haxe_flixel",
  Ionic = "ionic",
  JavaFX = "javafx",
  Keras = "keras",
  Kivy = "kivy",
  KotlinMultiplatformMobile = "kotlin_multiplatform_mobile",
  Laravel = "laravel",
  Love2D = "love_2d",
  MXNet = "mxnet",
  Mbed = "mbed",
  MicroPython = "micropython",
  Mojolicious = "mojolicious",
  NativeScript = "native_script",
  NestJS = "nest_js",
  NextJS = "next_js",
  NuxtJS = "nuxt_js",
  Phoenix = "phoenix",
  PlayFramework = "play_framework",
  PyQt = "pyqt",
  PyTorch = "pytorch",
  Qt = "qt",
  QuasarFramework = "quasar_framework",
  RIOTOS = "riot_os",
  RacketGUI = "racket_gui",
  React = "react",
  ReactNative = "react_native",
  RubyOnRails = "ruby_on_rails",
  SDL = "sdl",
  SFML = "sfml",
  ScikitLearn = "scikit_learn",
  SpringBoot = "spring_boot",
  Svelte = "svelte",
  SwiftUI = "swift_ui",
  Swing = "swing",
  Symfony = "symfony",
  TensorFlow = "tensorflow",
  Theano = "theano",
  Tkinter = "tkinter",
  Tock = "tock",
  TornadoFX = "tornado_fx",
  UWP = "uwp",
  VueJS = "vue_js",
  WPF = "wpf",
  WinForms = "win_forms",
  WinUI = "win_ui",
  Xamarin = "xamarin",
  Zephyr = "zephyr",
  Zsh = "zsh",
  wxWidgets = "wx_widgets",
}

export const FRAMEWORKS_BY_LANGUAGE = {
  [ProgrammingLanguage.JavaScript]: [
    Framework.Angular,
    Framework.React,
    Framework.VueJS,
    Framework.EmberJS,
    Framework.ExpressJS,
    Framework.NextJS,
    Framework.NuxtJS,
    Framework.GatsbyJS,
    Framework.Svelte,
    Framework.Electron,
    Framework.Ionic,
    Framework.NativeScript,
    Framework.ReactNative,
    Framework.Framework7,
    Framework.QuasarFramework,
  ],
  [ProgrammingLanguage.TypeScript]: [
    Framework.Angular,
    Framework.React,
    Framework.VueJS,
    Framework.EmberJS,
    Framework.ExpressJS,
    Framework.NextJS,
    Framework.NuxtJS,
    Framework.GatsbyJS,
    Framework.Svelte,
    Framework.Electron,
    Framework.Ionic,
    Framework.NativeScript,
    Framework.ReactNative,
    Framework.Framework7,
    Framework.QuasarFramework,
  ],
  [ProgrammingLanguage.Python]: [
    Framework.Django,
    Framework.Flask,
    Framework.PyQt,
    Framework.Kivy,
    Framework.Tkinter,
    Framework.TornadoFX,
    Framework.PyTorch,
    Framework.TensorFlow,
    Framework.Theano,
    Framework.Caffe,
    Framework.MXNet,
    Framework.ScikitLearn,
    Framework.Keras,
    Framework.MicroPython,
  ],
  [ProgrammingLanguage.Ruby]: [Framework.RubyOnRails],
  [ProgrammingLanguage.PHP]: [
    Framework.Laravel,
    Framework.Symfony,
    Framework.CakePHP,
  ],
  [ProgrammingLanguage.Java]: [
    Framework.SpringBoot,
    Framework.PlayFramework,
    Framework.JavaFX,
    Framework.Swing,
  ],
  [ProgrammingLanguage.Scala]: [Framework.PlayFramework],
  [ProgrammingLanguage.Kotlin]: [
    Framework.KotlinMultiplatformMobile,
    Framework.TornadoFX,
  ],
  [ProgrammingLanguage.Swift]: [
    Framework.SwiftUI,
    Framework.Cocoa,
    Framework.AppKit,
  ],
  [ProgrammingLanguage.CSharp]: [
    Framework.ASPNETCore,
    Framework.WinForms,
    Framework.WPF,
    Framework.UWP,
    Framework.Xamarin,
  ],
  [ProgrammingLanguage.Rust]: [
    Framework.Tock,
    Framework.RIOTOS,
    Framework.Zephyr,
    Framework.Contiki,
  ],
  [ProgrammingLanguage.ObjectiveC]: [Framework.Cocoa, Framework.AppKit],
  [ProgrammingLanguage.C]: [
    Framework.GTK,
    Framework.SDL,
    Framework.Qt,
    Framework.wxWidgets,
  ],
  [ProgrammingLanguage.CPlusPlus]: [
    Framework.Qt,
    Framework.SDL,
    Framework.SFML,
    Framework.GTK,
    Framework.wxWidgets,
  ],
  [ProgrammingLanguage.Go]: [Framework.NestJS],
  [ProgrammingLanguage.Elixir]: [Framework.Phoenix],
  [ProgrammingLanguage.Julia]: [Framework.MXNet],
  [ProgrammingLanguage.R]: [Framework.TensorFlow],
  [ProgrammingLanguage.Lua]: [Framework.Love2D],
  [ProgrammingLanguage.Haxe]: [Framework.HaxeFlixel],
  [ProgrammingLanguage.GDScript]: [Framework.Godot],
  [ProgrammingLanguage.QML]: [Framework.Qt],
  [ProgrammingLanguage.Dart]: [Framework.Flutter],
  [ProgrammingLanguage.FSharp]: [Framework.Fable],
  [ProgrammingLanguage.Shell]: [Framework.Bash, Framework.Zsh],
  [ProgrammingLanguage.Perl]: [Framework.Mojolicious],
  [ProgrammingLanguage.Racket]: [Framework.RacketGUI],
};

export enum Iteration {
  description = "description",
  productOverview = "product-overview",
  userStories = "user-stories",
  requirements = "requirements",
  acceptanceCriteria = "acceptance-criteria",
  testScenarios = "test-scenarios",
  testCases = "test-cases",
}
export const ITERATIONS = Object.values(Iteration);
export const ITERATION_LABELS = new Map([
  [Iteration.description, "Description"],
  [Iteration.productOverview, "Product Overview"],
  [Iteration.userStories, "User Stories"],
  [Iteration.requirements, "Requirements"],
  [Iteration.acceptanceCriteria, "Acceptance Criteria"],
  [Iteration.testScenarios, "Test Scenarios"],
  [Iteration.testCases, "Test Cases"],
]);

export enum StructrualFragment {
  userStory = "user-story",
  requirement = "requirement",
  acceptanceCriteria = "acceptance-criteria",
  testScenario = "test-scenario",
  testCase = "test-case",
}

export const STRUCTURAL_FRAGMENT_LABELS = new Map([
  [StructrualFragment.userStory, "User Story"],
  [StructrualFragment.requirement, "Requirement"],
  [StructrualFragment.acceptanceCriteria, "Acceptance Criteria"],
  [StructrualFragment.testScenario, "Test Scenario"],
  [StructrualFragment.testCase, "Test Case"],
]);

export const ITERATION_BY_STRUCTURAL_FRAGMENT = new Map([
  [StructrualFragment.userStory, Iteration.userStories],
  [StructrualFragment.requirement, Iteration.requirements],
  [StructrualFragment.acceptanceCriteria, Iteration.acceptanceCriteria],
  [StructrualFragment.testScenario, Iteration.testScenarios],
  [StructrualFragment.testCase, Iteration.testCases],
]);
export const STRUCTURAL_FRAGMENT_BY_ITERATION = new Map([
  [Iteration.userStories, StructrualFragment.userStory],
  [Iteration.requirements, StructrualFragment.requirement],
  [Iteration.acceptanceCriteria, StructrualFragment.acceptanceCriteria],
  [Iteration.testScenarios, StructrualFragment.testScenario],
  [Iteration.testCases, StructrualFragment.testCase],
]);

export const GENERATOR_ACTION_BY_ITERATION = new Map<
  Iteration,
  Extract<keyof Store, `generate${string}`>
>([
  [Iteration.productOverview, "generateProductOverview"],
  [Iteration.userStories, "generateUserStories"],
  [Iteration.requirements, "generateRequirements"],
  [Iteration.acceptanceCriteria, "generateAcceptanceCriteria"],
  [Iteration.testScenarios, "generateTestScenarios"],
  [Iteration.testCases, "generateTestCases"],
]);
export const ADD_ACTION_BY_STRUCTURAL_FRAGMENT = new Map<
  StructrualFragment,
  Extract<keyof Store, `add${string}`>
>([
  [StructrualFragment.userStory, "addUserStory"],
  [StructrualFragment.requirement, "addRequirement"],
  [StructrualFragment.acceptanceCriteria, "addAcceptanceCriteria"],
  [StructrualFragment.testScenario, "addTestScenario"],
]);
export const REMOVE_ACTION_BY_STRUCTURAL_FRAGMENT = new Map<
  StructrualFragment,
  Extract<keyof Store, `remove${string}`>
>([
  [StructrualFragment.userStory, "removeUserStory"],
  [StructrualFragment.requirement, "removeRequirement"],
  [StructrualFragment.acceptanceCriteria, "removeAcceptanceCriteria"],
  [StructrualFragment.testScenario, "removeTestScenario"],
]);
