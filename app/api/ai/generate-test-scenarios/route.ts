import { SnapshotIn, SnapshotOut } from "mobx-state-tree";
import { NextResponse } from "next/server";

import {
  AcceptanceCriteria,
  Requirement,
  TestScenario,
  UserStory,
} from "@/store/models";

import { ai, generatePrompt, prepareContent, systemPrompt } from "../lib";

export const ENDPOINT = "/api/ai/generate-test-scenarios";
export interface GenerateTestScenariosRequestBody {
  description: string;
  productOverview: string;
  userStories: SnapshotOut<UserStory>[];
  requirements: SnapshotOut<Requirement>[];
  acceptanceCriteria: SnapshotOut<AcceptanceCriteria>[];
}
export interface GenerateTestScenariosResponseBody {
  testScenarios: SnapshotIn<TestScenario>[];
}

export async function POST(request: Request) {
  const {
    description,
    productOverview,
    userStories,
    requirements,
    acceptanceCriteria,
  } = (await request.json()) as GenerateTestScenariosRequestBody;

  const result = await ai.createChatCompletion({
    model: "gpt-3.5-turbo",
    n: 1,
    temperature: 0,
    messages: [
      { role: "user", content: systemPrompt },
      {
        role: "user",
        content: `description: ${description}`,
      },
      {
        role: "user",
        content: `product overview: ${productOverview}`,
      },
      {
        role: "user",
        content: `user stories: ${userStories
          .map(({ content }) => `- ${content}`)
          .join("\n")}`,
      },
      {
        role: "user",
        content: `requirements: ${requirements
          .map(({ content }) => `- ${content}`)
          .join("\n")}`,
      },
      {
        role: "user",
        content: `acceptance criteria: ${acceptanceCriteria
          .map(({ content }) => `- ${content}`)
          .join("\n")}`,
      },
      ...generatePrompt("test scenarios"),
      {
        role: "user",
        content:
          // TODO: Once access to GPT-4 is available, we should extend tests as some tests may be done by GPT-4 image processor.
          "Test execution will be performed by machines. In this stage you are asked to only generate the test scenario titles without the test cases. Generating test cases will be done later in a separate request.",
      },
    ],
  });

  const testScenarios = result.data.choices[0].message?.content;

  if (testScenarios == null) {
    return NextResponse.json(
      {
        message: 'No response generated by ai for "test scenarios"!',
      },
      { status: 502 }
    );
  }

  return NextResponse.json({
    testScenarios: prepareContent(testScenarios),
  } as GenerateTestScenariosResponseBody);
}
