import { NextResponse } from "next/server";

import { Framework, ProgrammingLanguage } from "store";

import { ai, systemPrompt } from "../lib";

export const ENDPOINT = "/api/ai/generate-product-overview";
export interface GenerateProductOverviewRequestBody {
  description: string;
}
export interface GenerateProductOverviewResponseBody {
  productOverview: string;
  framework: Framework | "-";
  programmingLanguage: ProgrammingLanguage | "-";
}

export async function POST(request: Request) {
  const { description } = await request.json();

  const result = await ai.createChatCompletion({
    model: "gpt-3.5-turbo",
    n: 1,
    temperature: 0,
    messages: [
      { role: "user", content: systemPrompt },
      {
        role: "user",
        content: `description: ${description}`,
      },
      {
        role: "user",
        content:
          'If the description is not valid or has any issues, start the response with "[ERROR]" and provide a brief explanation of the issue(s) found. If the description is valid, generate a product overview highlighting its primary features, target users, and benefits without including any meta conversation or extra information. It is important to avoid guessing the intention of the description and stick with its explicit message.',
      },
    ],
  });

  const validationResultContent =
    result.data.choices[0].message?.content.trim();

  if (validationResultContent == null) {
    throw NextResponse.json(
      {
        message: 'No response generated by ai for "production overview"!',
      },
      { status: 502 }
    );
  }
  if (validationResultContent.startsWith("[ERROR]")) {
    return NextResponse.json(
      {
        message: validationResultContent.replace(/^\[ERROR\]/, "").trim(),
      },
      { status: 502 }
    );
  }

  const productOverview = validationResultContent;

  const frameworkResult = await ai.createChatCompletion({
    model: "gpt-3.5-turbo",
    n: 1,
    temperature: 0,
    messages: [
      { role: "user", content: systemPrompt },
      {
        role: "user",
        content: `description: ${description}`,
      },
      {
        role: "user",
        content: `product overview: ${productOverview}`,
      },
      {
        role: "user",
        content: `framework codes: ${Object.values(Framework).join(",")}`,
      },
      {
        role: "user",
        content:
          'If there are multiple suggestions select the best, if all are good, select one randomly. Please provide ONLY the code of the recommended framework for the application using the provided list of codes, as a SINGLE word. Do not include any additional text, or explanations. If there is no suggestion, simply return "[NONE]".',
      },
    ],
  });
  const suggestedFramework =
    frameworkResult.data.choices[0].message?.content.trim();
  let framework: Framework | null;

  console.log(suggestedFramework, productOverview);

  if (suggestedFramework == null) {
    return NextResponse.json(
      {
        message: 'No response generated by ai for "framework"!',
      },
      { status: 502 }
    );
  } else if (suggestedFramework.startsWith("[NONE]")) {
    framework = null;
  } else if (!Object.values<string>(Framework).includes(suggestedFramework)) {
    return NextResponse.json(
      {
        message: 'Invalid "framework" returned by ai!',
      },
      { status: 502 }
    );
  } else {
    framework = suggestedFramework as Framework;
  }

  const programmingLanguageResult = await ai.createChatCompletion({
    model: "gpt-3.5-turbo",
    n: 1,
    temperature: 0,
    messages: [
      { role: "user", content: systemPrompt },
      {
        role: "user",
        content: `description: ${description}`,
      },
      {
        role: "user",
        content: `product overview: ${productOverview}`,
      },
      {
        role: "user",
        content: `framework: ${framework}`,
      },
      {
        role: "user",
        content: `programming language codes: ${Object.values(
          ProgrammingLanguage
        ).join(",")}`,
      },
      {
        role: "user",
        content:
          'Please provide ONLY the code of the recommended programming language for the application using the provided list of codes, as a SINGLE word. Do not include any additional text, or explanations. If there is no suggestion, simply return "[NONE]".',
      },
    ],
  });

  const suggestedProgrammingLanguage =
    programmingLanguageResult.data.choices[0].message?.content.trim();
  let programmingLanguage: ProgrammingLanguage | null;

  if (suggestedProgrammingLanguage == null) {
    return NextResponse.json(
      {
        message: 'No response generated by ai for "programming language"!',
      },
      { status: 502 }
    );
  } else if (suggestedProgrammingLanguage.startsWith("[NONE]")) {
    programmingLanguage = null;
  } else if (
    !Object.values<string>(ProgrammingLanguage).includes(
      suggestedProgrammingLanguage
    )
  ) {
    return NextResponse.json(
      {
        message: 'Invalid "programming language" returned by ai!',
      },
      { status: 502 }
    );
  } else {
    programmingLanguage = suggestedProgrammingLanguage as ProgrammingLanguage;
  }
  return NextResponse.json({ productOverview, framework, programmingLanguage });
}
