import { SnapshotIn, SnapshotOut } from "mobx-state-tree";
import { NextResponse } from "next/server";

import { AcceptanceCriteria, Requirement, UserStory } from "@/store/models";

import { ai, generatePrompt, prepareContent, systemPrompt } from "../lib";

export interface GenerateAcceptanceCriteriaRequestBody {
  description: string;
  productOverview: string;
  userStories: SnapshotOut<UserStory>[];
  requirements: SnapshotOut<Requirement>[];
}
export interface GenerateAcceptanceCriteriaResponseBody {
  acceptanceCriteria: SnapshotIn<AcceptanceCriteria>[];
}

export async function POST(request: Request) {
  const { description, productOverview, userStories, requirements } =
    (await request.json()) as GenerateAcceptanceCriteriaRequestBody;

  const result = await ai.createChatCompletion({
    model: "gpt-3.5-turbo",
    n: 1,
    temperature: 0,
    messages: [
      { role: "user", content: systemPrompt },
      {
        role: "user",
        content: `description: ${description}`,
      },
      {
        role: "user",
        content: `product overview: ${productOverview}`,
      },
      {
        role: "user",
        content: `user stories: ${userStories
          .map(({ content }) => `- ${content}`)
          .join("\n")}`,
      },
      {
        role: "user",
        content: `requirements: ${requirements
          .map(({ content }) => `- ${content}`)
          .join("\n")}`,
      },
      ...generatePrompt("acceptance criteria"),
    ],
  });

  const acceptanceCriteria = result.data.choices[0].message?.content;

  if (acceptanceCriteria == null) {
    return NextResponse.json(
      {
        message: 'No response generated by ai for "acceptance criteria"!',
      },
      { status: 502 }
    );
  }

  return NextResponse.json({
    acceptanceCriteria: prepareContent(acceptanceCriteria),
  } as GenerateAcceptanceCriteriaResponseBody);
}
