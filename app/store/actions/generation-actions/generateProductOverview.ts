import { flow, toGenerator } from "mobx-state-tree";

import { Framework, Iteration, ProgrammingLanguage } from "store";
import ai from "store/api";
import { Store } from "store/store";

import { generator, systemPrompt } from "./utilities";

const generateProductOverview = flow(function* (self: Store) {
  self.resetValidationErrors();

  self.productOverview = null;
  self.framework = null;
  self.programmingLanguage = null;

  // Generate the product overview
  const result = yield* toGenerator(
    ai.createChatCompletion({
      model: "gpt-3.5-turbo",
      n: 1,
      temperature: 0,
      messages: [
        { role: "user", content: systemPrompt },
        {
          role: "user",
          content: `description: ${self.description}`,
        },
        {
          role: "user",
          content:
            'If the description is not valid or has any issues, start the response with "[ERROR]" and provide a brief explanation of the issue(s) found. If the description is valid, generate a product overview highlighting its primary features, target users, and benefits without including any meta conversation or extra information. It is important to avoid guessing the intention of the description and stick with its explicit message.',
        },
      ],
    })
  );

  // Handle the validation errors if there are any
  const validationResultContent =
    result.data.choices[0].message?.content.trim() ??
    "[ERROR] Validation failed!";

  if (validationResultContent.startsWith("[ERROR]")) {
    self.setValidationErrors(
      validationResultContent.replace(/^\[ERROR\]/, "").trim()
    );
    return;
  }

  self.productOverview = validationResultContent;

  const frameworkResult = yield* toGenerator(
    ai.createChatCompletion({
      model: "gpt-3.5-turbo",
      n: 1,
      temperature: 0,
      messages: [
        { role: "user", content: systemPrompt },
        {
          role: "user",
          content: `description: ${self.description}`,
        },
        {
          role: "user",
          content: `product overview: ${self.productOverview}`,
        },
        {
          role: "user",
          content: `framework codes: ${Object.values(Framework).join(",")}`,
        },
        {
          role: "user",
          content:
            "Please provide ONLY the code of the recommended framework for the application using the provided list of codes, as a SINGLE word. Do not include any additional text, or explanations. If there is no suggestion, simply return a dash '-'.",
        },
      ],
    })
  );

  const framework = frameworkResult.data.choices[0].message?.content;

  if (framework == null) {
    throw new Error("No response generated by ai for the framework!");
  }
  if (framework === "-") {
    // Do nothing and keep `self.framework` null
  } else if (!Object.values<string>(Framework).includes(framework)) {
    throw new Error("Invalid response generated by ai for the framework!");
  } else {
    self.setFramework(framework as Framework);
  }

  const programmingLanguageResult = yield* toGenerator(
    ai.createChatCompletion({
      model: "gpt-3.5-turbo",
      n: 1,
      temperature: 0,
      messages: [
        { role: "user", content: systemPrompt },
        {
          role: "user",
          content: `description: ${self.description}`,
        },
        {
          role: "user",
          content: `product overview: ${self.productOverview}`,
        },
        {
          role: "user",
          content: `framework: ${self.framework}`,
        },
        {
          role: "user",
          content: `programming language codes: ${Object.values(
            ProgrammingLanguage
          ).join(",")}`,
        },
        {
          role: "user",
          content:
            "Please provide ONLY the code of the recommended programming language for the application using the provided list of codes, as a SINGLE word. Do not include any additional text, or explanations. If there is no suggestion, simply return a dash '-'.",
        },
      ],
    })
  );

  const programmingLanguage =
    programmingLanguageResult.data.choices[0].message?.content;

  if (programmingLanguage == null) {
    throw new Error(
      "No response generated by ai for the programming language!"
    );
  }
  if (programmingLanguage === "-") {
    // Do nothing and keep `self.programmingLanguage` null
  } else if (
    !Object.values<string>(ProgrammingLanguage).includes(programmingLanguage)
  ) {
    throw new Error(
      "Invalid response generated by ai for the programming language!"
    );
  } else {
    self.programmingLanguage = programmingLanguage as ProgrammingLanguage;
  }

  self.eventTarget.emit("iterationUpdate", Iteration.productOverview);
}) as (self_: unknown) => Promise<void>;

export default generator(generateProductOverview);
